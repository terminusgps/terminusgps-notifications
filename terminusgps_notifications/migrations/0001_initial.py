# Generated by Django 5.2.7 on 2025-10-10 20:59

import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import encrypted_field.fields
import terminusgps.wialon.flags
import terminusgps_notifications.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('terminusgps_payments', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WialonNotificationTrigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('geozone', 'Geofence'), ('address', 'Address'), ('speed', 'Speed'), ('alarm', 'Alarm'), ('digital_input', 'Digital input'), ('msg_param', 'Parameter in a message'), ('sensor_value', 'Sensor value'), ('outage', 'Connection loss'), ('interposition', 'Interposition of units'), ('msgs_counter', 'Excess of messages'), ('route_control', 'Route progress'), ('driver', 'Driver'), ('trailer', 'Trailer'), ('service_interals', 'Maintenance'), ('fuel_filling', 'Fuel filling/battery charge'), ('fuel_theft', 'Fuel drain/theft'), ('health_check', 'Health check')], default='sensor_value', max_length=64)),
                ('parameters', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_format', models.CharField(default='%Y-%m-%d %H:%M:%S', max_length=64)),
                ('resource_id', models.CharField(blank=True, default=None, help_text='Please enter an 8-digit Wialon resource id to create notifications in.', max_length=8, null=True, validators=[terminusgps_notifications.models.validate_is_digit, django.core.validators.MinLengthValidator(8)])),
                ('max_sms_count', models.PositiveIntegerField(default=500, help_text='Please enter the maximum number of allowed sms messages for the customer in a single period.')),
                ('max_voice_count', models.PositiveIntegerField(default=500, help_text='Please enter the maximum number of allowed voice messages for the customer in a single period.')),
                ('sms_count', models.PositiveIntegerField(default=0, help_text='Please enter the current sms message count for the customer.')),
                ('voice_count', models.PositiveIntegerField(default=0, help_text='Please enter the current voice message count for the customer.')),
                ('tax_rate', models.DecimalField(decimal_places=4, default=0.0825, help_text='Please enter a tax rate for the customer.', max_digits=9)),
                ('subtotal', models.DecimalField(decimal_places=2, default=44.99, help_text='Please enter a dollar amount to charge the customer (+tax) every period.', max_digits=9)),
                ('tax', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('subtotal'), '*', django.db.models.expressions.CombinedExpression(models.F('tax_rate'), '+', models.Value(1))), '-', models.F('subtotal')), output_field=models.DecimalField(decimal_places=2, max_digits=9))),
                ('grand_total', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(models.F('subtotal'), '*', django.db.models.expressions.CombinedExpression(models.F('tax_rate'), '+', models.Value(1))), output_field=models.DecimalField(decimal_places=2, max_digits=9))),
                ('subscription', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='customer', to='terminusgps_payments.subscription')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'customer',
                'verbose_name_plural': 'customers',
            },
        ),
        migrations.CreateModel(
            name='WialonToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', encrypted_field.fields.EncryptedField(max_length=72)),
                ('flags', models.PositiveIntegerField(default=terminusgps.wialon.flags.TokenFlag['VIEW_ACCESS'] | terminusgps.wialon.flags.TokenFlag['MANAGE_NONSENSITIVE'] | terminusgps.wialon.flags.TokenFlag['MANAGE_SENSITIVE'])),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='token', to='terminusgps_notifications.customer')),
            ],
        ),
        migrations.CreateModel(
            name='WialonUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wialon_id', models.PositiveBigIntegerField()),
                ('name', models.CharField(max_length=64)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='terminusgps_notifications.customer')),
            ],
        ),
        migrations.CreateModel(
            name='WialonNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wialon_id', models.PositiveBigIntegerField()),
                ('name', models.CharField(help_text='Please provide a memorable name for your notification.', max_length=64)),
                ('text', models.TextField(max_length=1024)),
                ('method', models.CharField(choices=[('sms', 'SMS'), ('voice', 'Voice')], default='sms', help_text='Please select a notification method.', max_length=5)),
                ('activation_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='Please provide a valid date and time to activate the notification.', null=True)),
                ('deactivation_time', models.DateTimeField(blank=True, default=None, help_text='Please provide a valid date and time to deactivate the notification. Leave this blank to never deactivate.', null=True)),
                ('max_alarms', models.PositiveIntegerField(default=0, help_text='Please provide the maximum number of alarms. 0 = unlimited alarms.')),
                ('max_message_interval', models.PositiveIntegerField(choices=[(0, 'Any time'), (60, '1 minute'), (600, '10 minutes'), (1800, '30 minutes'), (3600, '1 hour'), (21600, '6 hours'), (43200, '12 hours'), (86400, '1 day'), (864000, '10 days')], default=0, help_text='Please provide the maximum allowed time between messages.')),
                ('alarm_timeout', models.PositiveIntegerField(default=0, help_text='Please provide the number of seconds before alarm timeout. 0 = never timeout.', validators=[django.core.validators.MaxValueValidator(1800)])),
                ('control_period', models.PositiveIntegerField(choices=[(0, 'Any time'), (60, 'Last minute'), (600, 'Last 10 minutes'), (3600, 'Last hour'), (86400, 'Last day')], default=0, help_text='Please provide the control period relative to current time.')),
                ('min_duration_alarm', models.PositiveIntegerField(default=0, help_text='Please provide the minimum duration of alarm state in seconds.', validators=[django.core.validators.MaxValueValidator(86400)])),
                ('min_duration_prev', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(86400)])),
                ('language', models.CharField(choices=[('en', 'English')], default='en', max_length=2)),
                ('flags', models.PositiveSmallIntegerField(choices=[(0, 'Trigger on first message'), (1, 'Trigger on every message'), (2, 'Disabled')], default=0)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='terminusgps_notifications.customer')),
                ('units', models.ManyToManyField(help_text='Please select Wialon units to assign to the notification.', to='terminusgps_notifications.wialonunit')),
            ],
            options={
                'verbose_name': 'wialon notification',
                'verbose_name_plural': 'wialon notifications',
            },
        ),
    ]
